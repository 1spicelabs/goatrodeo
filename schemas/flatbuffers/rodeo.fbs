namespace goat_rodeo;

// attribute "priority";

// table Header {
//   version: u8 = 0;
//   }

struct MD5 {
  hash:[uint8:16];
}


struct Position {
  offset: uint64;
}

enum PayloadType: byte {BSON}
enum PayloadCompression: byte {NONE}
enum PayloadEncryption: byte {NONE, TwoFish, AES, ChaCha20, Blowfish}

struct EncryptionKeyIdentifier {
  id: uint32;
}

struct MultifilePosition {
  // the least significant 64 bits of the target file's SHA256
  // 0 if it refers to this file
  other: uint64; 
  offset: Position;
}

struct Entry {
  // the version of this entry
version:  ubyte;
// the position in the file of the start of this record
position: Position;
// the number of bytes 
data_len: uint32;
// the payload type
data_type: PayloadType;
// the md5 of the payload's identifier
key_md5: MD5;
// the date that the payload was generated
timestamp: long;
// if the payload is merged or has a back-reference, it's here
previous_version: MultifilePosition;
// was the payload merged with the back-reference
merged_with_previous: bool;
compression: PayloadCompression;
encryption: PayloadEncryption;
encryption_key: EncryptionKeyIdentifier;
}

